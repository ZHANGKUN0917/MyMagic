package tempdb;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import tempdb.TreasureChestModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table TREASURE_CHEST_MODEL.
*/
public class TreasureChestModelDao extends AbstractDao<TreasureChestModel, String> {

    public static final String TABLENAME = "TREASURE_CHEST_MODEL";

    /**
     * Properties of entity TreasureChestModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property LiveId = new Property(0, String.class, "liveId", true, "LIVE_ID");
        public final static Property StartTime = new Property(1, String.class, "startTime", false, "START_TIME");
        public final static Property WatchSeconds = new Property(2, Long.class, "watchSeconds", false, "WATCH_SECONDS");
        public final static Property Box1Status = new Property(3, Integer.class, "box1Status", false, "BOX1_STATUS");
        public final static Property Box2Status = new Property(4, Integer.class, "box2Status", false, "BOX2_STATUS");
        public final static Property Box3Status = new Property(5, Integer.class, "box3Status", false, "BOX3_STATUS");
        public final static Property Box4Status = new Property(6, Integer.class, "box4Status", false, "BOX4_STATUS");
        public final static Property Box5Status = new Property(7, Integer.class, "box5Status", false, "BOX5_STATUS");
        public final static Property Box6Status = new Property(8, Integer.class, "box6Status", false, "BOX6_STATUS");
        public final static Property FavoriteStatus = new Property(9, Integer.class, "favoriteStatus", false, "FAVORITE_STATUS");
        public final static Property ShareStatus = new Property(10, Integer.class, "shareStatus", false, "SHARE_STATUS");
    };


    public TreasureChestModelDao(DaoConfig config) {
        super(config);
    }
    
    public TreasureChestModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'TREASURE_CHEST_MODEL' (" + //
                "'LIVE_ID' TEXT PRIMARY KEY NOT NULL ," + // 0: liveId
                "'START_TIME' TEXT," + // 1: startTime
                "'WATCH_SECONDS' INTEGER," + // 2: watchSeconds
                "'BOX1_STATUS' INTEGER," + // 3: box1Status
                "'BOX2_STATUS' INTEGER," + // 4: box2Status
                "'BOX3_STATUS' INTEGER," + // 5: box3Status
                "'BOX4_STATUS' INTEGER," + // 6: box4Status
                "'BOX5_STATUS' INTEGER," + // 7: box5Status
                "'BOX6_STATUS' INTEGER," + // 8: box6Status
                "'FAVORITE_STATUS' INTEGER," + // 9: favoriteStatus
                "'SHARE_STATUS' INTEGER);"); // 10: shareStatus
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'TREASURE_CHEST_MODEL'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, TreasureChestModel entity) {
        stmt.clearBindings();
 
        String liveId = entity.getLiveId();
        if (liveId != null) {
            stmt.bindString(1, liveId);
        }
 
        String startTime = entity.getStartTime();
        if (startTime != null) {
            stmt.bindString(2, startTime);
        }
 
        Long watchSeconds = entity.getWatchSeconds();
        if (watchSeconds != null) {
            stmt.bindLong(3, watchSeconds);
        }
 
        Integer box1Status = entity.getBox1Status();
        if (box1Status != null) {
            stmt.bindLong(4, box1Status);
        }
 
        Integer box2Status = entity.getBox2Status();
        if (box2Status != null) {
            stmt.bindLong(5, box2Status);
        }
 
        Integer box3Status = entity.getBox3Status();
        if (box3Status != null) {
            stmt.bindLong(6, box3Status);
        }
 
        Integer box4Status = entity.getBox4Status();
        if (box4Status != null) {
            stmt.bindLong(7, box4Status);
        }
 
        Integer box5Status = entity.getBox5Status();
        if (box5Status != null) {
            stmt.bindLong(8, box5Status);
        }
 
        Integer box6Status = entity.getBox6Status();
        if (box6Status != null) {
            stmt.bindLong(9, box6Status);
        }
 
        Integer favoriteStatus = entity.getFavoriteStatus();
        if (favoriteStatus != null) {
            stmt.bindLong(10, favoriteStatus);
        }
 
        Integer shareStatus = entity.getShareStatus();
        if (shareStatus != null) {
            stmt.bindLong(11, shareStatus);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public TreasureChestModel readEntity(Cursor cursor, int offset) {
        TreasureChestModel entity = new TreasureChestModel( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // liveId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // startTime
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // watchSeconds
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // box1Status
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // box2Status
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // box3Status
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // box4Status
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // box5Status
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // box6Status
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // favoriteStatus
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10) // shareStatus
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, TreasureChestModel entity, int offset) {
        entity.setLiveId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setStartTime(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setWatchSeconds(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setBox1Status(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setBox2Status(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setBox3Status(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setBox4Status(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setBox5Status(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setBox6Status(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setFavoriteStatus(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setShareStatus(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(TreasureChestModel entity, long rowId) {
        return entity.getLiveId();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(TreasureChestModel entity) {
        if(entity != null) {
            return entity.getLiveId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
